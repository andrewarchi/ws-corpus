{
  "id": "python/molfarua-codewars",
  "name": "CodeWars_Solutions",
  "authors": ["MolfarUA"],
  "license": "GPL-3.0",
  "languages": ["Python", "CoffeeScript", "C++", "Java", "JavaScript", "TypeScript"],
  "tags": ["interpreter"],
  "date": "2021-12-31 01:14:10 +0200",
  "spec_version": "0.3",
  "source": ["https://github.com/MolfarUA/CodeWars_Solutions"],
  "submodules": [{ "path": "CodeWars_Solutions", "url": "https://github.com/MolfarUA/CodeWars_Solutions" }],
  "challenges": ["Codewars"],
  "assembly": {
    "mnemonics": {
      "push": [
        "push",
        "stack-push",
        "pushStack",
        "Push",
        "STACK_PSH",
        "Push",
        "push <java_number>",
        "push_n",
        "push",
        "push",
        "",
        "PushNumberCommand",
        "STACK_PUSH",
        "Push",
        "push-onto-stack"
      ],
      "dup": [
        "dupe0",
        "stack-duplicate",
        "duplicateTopStack",
        "Duplicate",
        "STACK_DUP",
        "DuplicateTop",
        "dup <java_number>",
        "duplicate_top",
        "dup",
        "duplicate",
        "dup",
        "DuplicateTopValue",
        "STACK_DUPLICATE_ONE",
        "DuplicateOne",
        "duplicate-stack-top"
      ],
      "copy": [
        "dupe",
        "stack-duplicate-nth",
        "duplicateNthStack",
        "Fish",
        "STACK_DUPN",
        "DuplicateNth",
        "top",
        "duplicate_nth",
        "dup",
        "duplicate",
        "",
        "DuplicateValueAtPosition",
        "STACK_DUPLICATE_NTH",
        "DuplicateNth",
        "duplicate-stack-n"
      ],
      "swap": [
        "swap",
        "swap-top-two",
        "swapStack",
        "Swap",
        "STACK_SWP",
        "SwapTop",
        "swp",
        "swap_top",
        "swap",
        "swap",
        "swap",
        "SwapTopTwoValues",
        "STACK_SWAP",
        "Swap",
        "swap-stack-top"
      ],
      "drop": [
        "discard0",
        "stack-pop",
        "popStack",
        "Discard top",
        "STACK_POP",
        "DiscardTop",
        "pop",
        "discard_top",
        "discard",
        "pop",
        "discard",
        "DiscardTopValue",
        "STACK_DISCARD_ONE",
        "DiscardOne",
        "discard-top"
      ],
      "slide": [
        "discard",
        "stack-discard",
        "popNStack",
        "Discard",
        "STACK_POPN",
        "DiscardN",
        "popn <java_number>",
        "discard_top_n",
        "slide",
        "discard",
        "",
        "RemoveNValuesUnderTop",
        "STACK_DISCARD_MANY",
        "DiscardMany",
        "discard-n"
      ],
      "add": [
        "add",
        "add",
        "add",
        "Add",
        "MATH_ADD",
        "Add",
        "add",
        "b_plus_a",
        "add",
        "add",
        "",
        "Add",
        "ARITHMETICS_SUM",
        "Sum",
        "addition"
      ],
      "sub": [
        "sub",
        "subtract",
        "subtract",
        "Subtract",
        "MATH_SUB",
        "Sub",
        "sub",
        "b_minus_a",
        "sub",
        "sub",
        "",
        "Subtract",
        "ARITHMETICS_SUBTRACT",
        "Subtract",
        "subtraction"
      ],
      "mul": [
        "mul",
        "multiply",
        "multiply",
        "Multiply",
        "MATH_MUL",
        "Mul",
        "mul",
        "b_times_a",
        "mul",
        "mult",
        "",
        "Multiply",
        "ARITHMETICS_MUL",
        "Mul",
        "multiplication"
      ],
      "div": [
        "div",
        "divide",
        "divide",
        "Divide",
        "MATH_DIV",
        "Div",
        "div",
        "b_div_a",
        "div",
        "div",
        "div",
        "Divide",
        "ARITHMETICS_DIV",
        "Div",
        "division"
      ],
      "mod": [
        "mod",
        "modulus",
        "modulo",
        "Modulo",
        "MATH_MOD",
        "Mod",
        "mod",
        "b_mod_a",
        "mod",
        "mod",
        "mod",
        "Modulus",
        "ARITHMETICS_MOD",
        "Mod",
        "modulo"
      ],
      "store": [
        "set",
        "heap-set",
        "popStoreHeap",
        "Store",
        "MEM_STORE",
        "HeapPut",
        "save",
        "a_at_b",
        "stash",
        "heapPut",
        "heap_put",
        "StoreAAtAddressB",
        "HEAP_STORE",
        "Store",
        "heap-write"
      ],
      "retrieve": [
        "get",
        "heap-get",
        "popPushFromHeap",
        "Read",
        "MEM_LOAD",
        "HeapPull",
        "load",
        "a_at_a",
        "unstash",
        "heapGet",
        "heap_get",
        "PopAThenPushHeapAddressA",
        "HEAP_PUSH",
        "HeapPushInStack",
        "heap-read"
      ],
      "label": [
        "label",
        "label",
        "defineLabel",
        "Label",
        "FC_LBL",
        "MarkLabel",
        "<java_label>:",
        "mark_label",
        "label",
        "set label",
        "",
        "NewLabelCommand",
        "FLOW_CONTROL_MARK",
        "",
        "mark-label"
      ],
      "call": [
        "call",
        "call",
        "callSubroutine",
        "Call",
        "FC_CSR",
        "CallLabel",
        "call <java_label>",
        "call_routine",
        "call",
        "call",
        "call",
        "CallSubroutineCommand",
        "FLOW_CONTROL_SUB_CALL",
        "SubCall",
        "call-subroutine"
      ],
      "jmp": [
        "jmp",
        "go",
        "jumpLabel",
        "Jump",
        "FC_JMP",
        "Jump",
        "jump <java_label>",
        "jump_unconditionally",
        "jmp",
        "jump",
        "jump",
        "JumpToCommand",
        "FLOW_CONTROL_JUMP",
        "Jump",
        "jump"
      ],
      "jz": [
        "jz",
        "go-if-zero",
        "jumpIfZero",
        "JumpZero",
        "FC_JZ",
        "IfNot",
        "jmpz <java_label>",
        "jump_if_zero",
        "jz",
        "jumpZero",
        "",
        "PopAndJumpIf ==",
        "FLOW_CONTROL_JUMP_ZERO",
        "JumpZero",
        "jump-if-zero"
      ],
      "jn": [
        "jlz",
        "go-if-negative",
        "jumpIfNegative",
        "JumpNegative",
        "FC_JN",
        "IfLt",
        "jmp <java_label>",
        "jump_if_less_than_zero",
        "jneg",
        "jumpLessZero",
        "",
        "PopAndJumpIf <=",
        "FLOW_CONTROL_JUMP_LESS",
        "JumpLess",
        "jump-if-lt-zero"
      ],
      "ret": [
        "ret",
        "exit",
        "returnSubroutine",
        "Return",
        "FC_RET",
        "Exit",
        "ret",
        "exit_routine",
        "ret",
        "return",
        "ret",
        "ExitSubroutine",
        "FLOW_CONTROL_SUB_EXIT",
        "SubExit",
        "exit-subroutine"
      ],
      "end": [
        "exit",
        "exit-program",
        "exitProgram",
        "End",
        "FC_END",
        "End",
        "stop",
        "exit_program",
        "exit",
        "exit",
        "exit",
        "ExitProgram",
        "FLOW_CONTROL_EXIT",
        "Exit",
        "exit"
      ],
      "printc": [
        "outc",
        "output-char",
        "outputCharacter",
        "PutChar",
        "IO_OC",
        "PutChar",
        "out",
        "print_char",
        "printc",
        "writeChar",
        "out_char",
        "OutputChar",
        "IO_OUTPUT_CHARACTER",
        "OutputCharacter",
        "pop-out-char"
      ],
      "printi": [
        "outn",
        "output-number",
        "outputNumber",
        "PutNumber",
        "IO_ON",
        "PutInt",
        "outn",
        "print_num",
        "printn",
        "writeNumber",
        "out_num",
        "OutputNumber",
        "IO_OUTPUT_NUMBER",
        "OutputNumber",
        "pop-out-num"
      ],
      "readc": [
        "in_c",
        "input-char",
        "inputCharacter",
        "ReadChar",
        "IO_IC",
        "ReadChar",
        "rchr",
        "read_char",
        "cin",
        "readChar",
        "in_char",
        "InputCharToHeap",
        "IO_READ_CHARACTER",
        "ReadCharacter",
        "read-in-char"
      ],
      "readi": [
        "in_n",
        "input-number",
        "inputNumber",
        "ReadNumber",
        "IO_IN",
        "ReadInt",
        "rnum",
        "read_num",
        "nin",
        "readNumber",
        "in_num",
        "InputNumberToHeap",
        "IO_READ_NUMBER",
        "ReadNumber",
        "read-in-num"
      ]
    },
    "patterns": { "java_label": "_[st]*", "java_number": "-?[1-9][0-9]*" },
    "usage": ["enum", "internal", "debug"],
    "notes": "Mnemonics: CoffeeScript #1, CoffeeScript #2, CoffeeScript #3, CoffeeScript #4, C++ #1, C++ #2, Java, JavaScript #1, JavaScript #2, JavaScript #3, Python, TypeScript #1, TypeScript #2, TypeScript #3, TypeScript #4"
  },
  "run_errors": "Needs Codewars entrypoints",
  "commands": [
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.py" },
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.coffee" },
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.cpp" },
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.java" },
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.js" },
    { "type": "interpreter", "bin": "2 kyu/Whitespace Interpreter/solution.ts" }
  ],
  "notes": "This appears to be an amalgamation of Codewars solutions by many authors. The diversity in mnemonics and approaches suggests a different understanding of the problem by different people, instead of incremental improvements by one author."
}
