{
  "id": "python/umutoztunc-whitesymex",
  "name": "whitesymex",
  "authors": ["Umut Barış Öztunç"],
  "license": "MIT",
  "languages": ["Python"],
  "tags": ["symbolic executor", "programs"],
  "date": "2021-05-30 11:23:21 +0000",
  "spec_version": "0.3",
  "source": ["https://github.com/umutoztunc/whitesymex", "https://whitesymex.readthedocs.io/"],
  "submodules": [{ "path": "whitesymex", "url": "https://github.com/umutoztunc/whitesymex" }],
  "packages": [{ "name": "whitesymex", "registry": "PyPI", "url": "https://pypi.org/project/whitesymex/" }],
  "whitespace": { "extension": "ws" },
  "programs": [
    {
      "path": "tests/data/password_checker.c",
      "generated": "tests/data/password_checker.ws",
      "aux": ["tests/data/password_checker.eir"],
      "spec_version": "0.2",
      "notes": "Compiled using ELVM"
    },
    { "path": "tests/data/xctf-finals-2020-spaceship.ws", "spec_version": "0.2" },
    { "path": "tests/data/count.ws" },
    { "path": "tests/data/hworld.ws" }
  ],
  "commands": [
    {
      "type": "symbolic executor",
      "bin": "whitesymex/cli.py",
      "usage": "[-h | --help] [--version] [--find <find>] [--avoid <avoid>] [--strategy {bfs,dfs,random}] [--loop-limit <limit>] <file>",
      "example_usages": ["--find Correct! --avoid Nope. tests/data/password_checker.ws"],
      "options": [
        { "short": "h", "long": "help", "desc": "show this help message and exit" },
        { "long": "version", "desc": "show program's version number and exit" },
        { "long": "find", "arg": "FIND", "desc": "string to find" },
        { "long": "avoid", "arg": "AVOID", "desc": "string to avoid" },
        {
          "long": "strategy",
          "arg": "STRATEGY",
          "type": "enum",
          "default": "bfs",
          "desc": "path exploration strategy",
          "values": [{ "values": ["bfs"] }, { "values": ["dfs"] }, { "values": ["random"] }]
        },
        { "long": "loop-limit", "arg": "LIMIT", "desc": "maximum number of iterations for symbolic loops" }
      ],
      "option_parse": "Python argparse"
    }
  ],
  "notes": "Inspired by angr (https://angr.io/)"
}
