{
  "id": "java/azige",
  "name": "水沝淼 (Water Programming Language)",
  "authors": ["Azige"],
  "license": "Apache-2.0",
  "languages": ["Java"],
  "tags": ["language", "interpreter", "disassembler", "programs"],
  "date": "2014-06-18 23:38:41 +0800",
  "spec_version": "0.3",
  "source": [
    "https://github.com/azige/whitespace-interpreter",
    "https://tieba.baidu.com/p/3173314405",
    "https://pan.baidu.com/s/1hqoWgxI"
  ],
  "whitespace": { "extension": "ws" },
  "assembly": {
    "mnemonics": {
      "push": ["S_PUSH"],
      "dup": ["S_DUP"],
      "copy": ["S_DUP2"],
      "swap": ["S_SWAP"],
      "drop": ["S_DISCARD"],
      "slide": ["S_REMOVE"],
      "add": ["A_ADD"],
      "sub": ["A_SUB"],
      "mul": ["A_MUL"],
      "div": ["A_DIV"],
      "mod": ["A_MOD"],
      "store": ["H_STORE"],
      "retrieve": ["H_RETRIEVE"],
      "label": ["F_MARK"],
      "call": ["F_CALL"],
      "jmp": ["F_JUMP"],
      "jz": ["F_JUMPZ"],
      "jn": ["F_JUMPN"],
      "ret": ["F_RETURN"],
      "end": ["F_EXIT"],
      "printc": ["I_PCHAR"],
      "printi": ["I_PNUM"],
      "readc": ["I_RCHAR"],
      "readi": ["I_RNUM"]
    },
    "indentation": "",
    "label_indentation": "",
    "usage": ["disassembler", "enum"]
  },
  "programs": [
    {
      "path": "src/main/pack/example/0to9.szm",
      "aux": ["src/test/resources/0to9.szm"],
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/1to10.ws",
      "aux": ["src/test/resources/1to10.ws"],
      "equivalent": "count.ws",
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/calc.ws",
      "aux": ["src/test/resources/calc.ws"],
      "equivalent": "calc.ws",
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/fact.ws",
      "aux": ["src/test/resources/fact.ws"],
      "equivalent": "fact.ws",
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/fibonacci.ws",
      "aux": ["src/test/resources/fibonacci.ws"],
      "equivalent": "fibonacci.ws",
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/hanoi.ws",
      "aux": ["src/test/resources/hanoi.ws"],
      "equivalent": "hanoi.ws",
      "spec_version": "0.2"
    },
    { "path": "src/main/pack/example/helloworld_cn.ws", "spec_version": "0.2" },
    {
      "path": "src/main/pack/example/hworld.ws",
      "aux": ["src/test/resources/hworld.ws"],
      "equivalent": "Hello, world! (Wikipedia)",
      "spec_version": "0.2"
    },
    {
      "path": "src/main/pack/example/name.ws",
      "aux": ["src/test/resources/name.ws"],
      "equivalent": "name.ws",
      "spec_version": "0.2"
    }
  ],
  "commands": [
    {
      "bin": "target/whitespace-interpreter-0.4-jar-with-dependencies.jar",
      "usage": "[-h | --help] [-p | -c] [-e <encoding> | --encoding <encoding>] <file>",
      "options": [
        { "short": "h", "long": "help", "desc": "Print this message" },
        {
          "short": "p",
          "desc": "Translate the source program into readable pseudocode, instead of running it"
        },
        { "short": "c", "desc": "Compile the source program into a binary file, instead of running it" },
        { "long": "szm", "desc": "Interpret the source program using the Water language extension" },
        {
          "short": "e",
          "long": "encoding",
          "arg": "encoding",
          "arg_required": true,
          "default": "UTF-8",
          "desc": "Specify the source file encoding"
        }
      ],
      "option_parse": "Java org.apache.commons.cli",
      "notes": "-p and -c options are mutually exclusive. -c serializes the Java objects of the parsed program to a .wso file."
    }
  ],
  "notes": "szm language opcodes are specified as 4 ternary trits using the alphabet 水 沝 淼. szm has additional operators not in Whitespace."
}
