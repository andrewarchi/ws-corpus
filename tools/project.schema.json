{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Project",
  "description": "Documentation of a Whitespace-related project",
  "type": "object",
  "$defs": {
    "id": {
      "type": "string",
      "pattern": "^[a-z0-9]+(-[a-z0-9]+)*/[a-z0-9]+(-[a-z0-9]+([-.][a-z0-9]+)*)?$",
      "description": "Unique project identifier and submodule path in the form of {language}/{author}-{project} or {language}/{author}"
    },
    "spec_version": { "type": "string", "enum": ["0.1", "0.2", "0.3", "unknown", "-"] },
    "instruction": {
      "type": "string",
      "enum": [
        "push",
        "dup",
        "copy",
        "swap",
        "drop",
        "slide",
        "add",
        "sub",
        "mul",
        "div",
        "mod",
        "store",
        "retrieve",
        "label",
        "call",
        "jmp",
        "jz",
        "jn",
        "ret",
        "end",
        "printc",
        "printi",
        "readc",
        "readi",
        "shuffle",
        "dumpstack",
        "dumpheap",
        "dumptrace"
      ]
    },
    "integer_type": {
      "type": "string",
      "enum": ["int64", "int32", "uint64", "uint32", "float64", "float32", "C int", "Go int", "Go uint"]
    },
    "precision": {
      "anyOf": [{ "type": "string", "enum": ["arbitrary", "fixed"] }, { "$ref": "#/$defs/integer_type" }]
    },
    "cap": {
      "oneOf": [{ "type": "integer", "minimum": 0 }, { "const": "unbounded" }, { "$ref": "#/$defs/integer_type" }]
    },
    "bound": { "oneOf": [{ "type": "integer" }, { "const": "unbounded" }, { "$ref": "#/$defs/integer_type" }] },
    "line_comment": { "type": "string", "examples": ["#", ";", "//", "--"] },
    "indentation": { "type": "string", "pattern": "^( *|\\t*)$", "examples": ["  ", "    ", "        ", "\t", ""] },
    "command_option": {
      "type": "object",
      "properties": {
        "short": { "anyOf": [{ "type": "string" }, { "type": "array", "items": { "type": "string" } }] },
        "long": { "type": "string" },
        "bare": { "type": "string" },
        "required": { "type": "boolean", "description": "Whether this option is required to be present" },
        "repeat_allowed": { "type": "boolean", "description": "Whether this option can be repeated" },
        "arg": { "type": "string" },
        "arg_required": { "type": "boolean", "description": "Whether an argument is required to be present" },
        "type": { "type": "string" },
        "default": { "anyOf": [{ "type": "string" }, { "type": "number" }, { "type": "boolean" }] },
        "min": { "type": "number" },
        "desc": { "type": "string" },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": { "values": { "type": "array", "items": { "type": "string" } }, "desc": { "type": "string" } },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "id": { "$ref": "#/$defs/id" },
    "name": { "type": "string", "description": "The name of the project" },
    "description": { "type": "string", "description": "Description of the project" },
    "authors": {
      "type": "array",
      "items": { "type": "string" },
      "minItems": 1,
      "uniqueItems": true,
      "description": "Project authors"
    },
    "license": {
      "allOf": [
        {
          "type": "string",
          "description": "Project license ID from the SPDX License List (https://spdx.org/licenses/)"
        },
        { "not": { "enum": ["", "not found"] } }
      ]
    },
    "languages": { "type": "array", "items": { "type": "string" }, "minItems": 1, "uniqueItems": true },
    "tags": { "type": "array", "items": { "type": "string" }, "minItems": 1, "uniqueItems": true },
    "date": { "type": "string", "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?( [+-]\\d{4})?)?$" },
    "spec_version": { "$ref": "#/$defs/spec_version" },
    "source": {
      "type": "array",
      "items": { "type": "string", "format": "uri" },
      "prefixItems": [
        {
          "type": "string",
          "format": "uri",
          "pattern": "^https://github\\.com/[^/]+/[^/]+(?:/tree/[^/]+)?$|^https://gist\\.github\\.com/[^/]+/[^/]+$|^https://gitlab\\.com/[^/]+/[^/]+(?:/-/tree/[^/]+)?$|^https://bitbucket\\.org/[^/]+/[^/]+(?:/src/[^/]+)?$|^https://git\\.code\\.sf\\.net/p/[^/]+/code$"
        }
      ],
      "minItems": 1,
      "uniqueItems": true
    },
    "source_unavailable": { "type": "boolean", "description": "Whether the source code is unavailable" },
    "package": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "manager": {
          "type": "string",
          "enum": ["crates.io", "Docker Hub", "Hackage", "npm", "NuGet", "PyPI", "RubyGems"]
        },
        "url": { "type": "string", "format": "uri" }
      },
      "required": ["name", "manager", "url"],
      "additionalProperties": false
    },
    "relations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": { "$ref": "#/$defs/id" },
          "type": { "type": "string", "enum": ["fork", "submodule", "embedded", "library", "binary", "assembly"] },
          "commit": { "type": "string" },
          "release": { "type": "string" }
        },
        "required": ["id", "type"],
        "additionalProperties": false
      }
    },
    "challenges": {
      "type": "array",
      "items": {
        "type": "string",
        "examples": [
          "Advent of Code 2015",
          "Advent of Code 2016",
          "Advent of Code 2017",
          "Advent of Code 2018",
          "Advent of Code 2019",
          "Advent of Code 2020",
          "Advent of Code 2021",
          "Cerner 2^5",
          "Code Golf",
          "Codewars",
          "Hacktoberfest 2016",
          "Hacktoberfest 2017",
          "Hacktoberfest 2018",
          "Project Euler",
          "Rosetta Code",
          "Sphere Online Judge",
          "yukicoder"
        ]
      }
    },
    "bounds": {
      "type": "object",
      "properties": {
        "precision": { "$ref": "#/$defs/precision" },
        "arg_precision": { "$ref": "#/$defs/precision" },
        "label_precision": { "$ref": "#/$defs/precision" },
        "stack_cap": { "$ref": "#/$defs/cap" },
        "call_stack_cap": { "$ref": "#/$defs/cap" },
        "heap_min": { "$ref": "#/$defs/bound" },
        "heap_max": { "$ref": "#/$defs/bound" },
        "heap_cap": { "$ref": "#/$defs/cap" },
        "label_cap": { "$ref": "#/$defs/cap" },
        "instruction_cap": { "$ref": "#/$defs/cap" }
      },
      "additionalProperties": false
    },
    "behavior": {
      "type": "object",
      "properties": {
        "buffered_output": { "type": "boolean" },
        "eof": { "oneOf": [{ "type": "integer", "examples": [0, -1] }, { "const": "error" }] }
      },
      "additionalProperties": false
    },
    "whitespace": {
      "type": "object",
      "properties": {
        "unimplemented": { "type": "array", "items": { "$ref": "#/$defs/instruction" }, "uniqueItems": true },
        "nonstandard": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "aliases": { "type": "array", "items": { "type": "string" } },
              "seq": { "type": "string", "pattern": "^[STL]+$" },
              "args": { "type": "array", "items": { "type": "string" } },
              "desc": { "type": "string" }
            },
            "additionalProperties": false
          }
        },
        "extension": { "type": "string", "examples": ["ws"] }
      },
      "additionalProperties": false
    },
    "assembly": {
      "type": "object",
      "properties": {
        "mnemonics": {
          "type": "object",
          "propertyNames": { "$ref": "#/$defs/instruction" },
          "patternProperties": { "": { "type": "array", "items": { "type": "string" } } },
          "additionalProperties": false
        },
        "macros": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "args": { "type": "array", "items": { "type": "string" } },
              "replace": { "type": "string" },
              "notes": { "type": "string" }
            },
            "required": ["name"],
            "additionalProperties": false
          }
        },
        "patterns": {
          "type": "object",
          "propertyNames": { "examples": ["number", "label"] },
          "patternProperties": { "": { "type": "string" } },
          "additionalProperties": true
        },
        "case_sensitive_instructions": { "type": "boolean" },
        "multiple_per_line": { "type": "boolean" },
        "line_comments": { "type": "array", "items": { "$ref": "#/$defs/line_comment" } },
        "block_comments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": { "start": { "type": "string" }, "end": { "type": "string" }, "nestable": { "type": "boolean" } },
            "required": ["start", "end", "nestable"],
            "additionalProperties": false,
            "examples": [
              { "start": "/*", "end": "*/", "nestable": false },
              { "start": "{-", "end": "-}", "nestable": true }
            ]
          }
        },
        "indentation": { "$ref": "#/$defs/indentation" },
        "label_indentation": { "$ref": "#/$defs/indentation" },
        "block_indentation": { "type": "boolean" },
        "binary_numbers": { "type": "boolean" },
        "usage": {
          "type": "array",
          "items": { "type": "string", "examples": ["assembler", "disassembler", "programs", "debug", "enum"] }
        },
        "extension": { "type": "string", "examples": ["wsa"] },
        "notes": { "type": "string", "examples": ["wsa"] }
      },
      "additionalProperties": false
    },
    "mappings": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "space": { "type": "string", "examples": ["S", "A", "space"] },
          "tab": { "type": "string", "examples": ["T", "B", "tab"] },
          "lf": { "type": "string", "examples": ["L", "N", "C", "lf", "\n"] },
          "spaces_between": { "type": "boolean" },
          "space_before_arg": { "type": "boolean" },
          "line_comment": { "$ref": "#/$defs/line_comment" },
          "before_stl": { "type": "boolean" },
          "ignore_case": { "type": "boolean" },
          "extension": { "type": "string" },
          "notes": { "type": "string" }
        },
        "required": ["space", "tab", "lf"],
        "additionalProperties": false
      }
    },
    "programs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "path": { "type": "string" },
          "generated": { "type": "string" },
          "inputs": { "type": "array", "items": { "type": "string" } },
          "outputs": { "type": "array", "items": { "type": "string" } },
          "aux": { "type": "array", "items": { "type": "string" } },
          "polyglot": { "type": "array", "items": { "type": "string" } },
          "mapping_index": { "type": "number" },
          "equivalent": {
            "type": "string",
            "examples": [
              "calc.ws",
              "count.ws",
              "fact.ws",
              "fibonacci.ws",
              "hanoi.ws",
              "hworld.ws",
              "loctest.ws",
              "name.ws",
              "quine.ws",
              "quine-2.ws",
              "rot13.ws"
            ]
          },
          "spec_version": { "$ref": "#/$defs/spec_version" },
          "generate": { "type": "string" },
          "authors": { "type": "array", "items": { "type": "string" } },
          "desc": { "type": "string" },
          "notes": { "type": "string" }
        },
        "required": ["path"],
        "additionalProperties": false
      }
    },
    "build_errors": { "type": "string" },
    "run_errors": { "type": "string" },
    "commands": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "bin": { "type": "string" },
          "dependencies": { "type": "array", "items": { "type": "string" } },
          "install_dependencies": { "type": "string" },
          "build": { "type": "string" },
          "build_errors": { "type": "string" },
          "usage": { "type": "string" },
          "example_usages": { "type": "array", "items": { "type": "string" } },
          "run_errors": { "type": "string" },
          "input": { "type": "string" },
          "output": { "type": "string" },
          "options": { "type": "array", "items": { "$ref": "#/$defs/command_option" } },
          "option_parse": {
            "type": "string",
            "examples": [
              "manual",
              "bash getopt",
              "bash getopts",
              "C getopt",
              "Clojure clojure.tools.cli",
              "Crystal option_parser",
              "Go flag",
              "Haskell Options.Applicative",
              "Haskell System.Console.CmdArgs",
              "Java org.apache.commons.cli",
              "OCaml Arg",
              "Objective-C getopt",
              "Perl Getopt::Std",
              "Python argparse",
              "Python click",
              "Python optparse",
              "Ruby Thor",
              "Ruby optparse",
              "Rust clap",
              "Rust structopt"
            ]
          },
          "subcommands": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "desc": { "type": "string" },
                "usage": { "type": "string" },
                "input": { "type": "string" },
                "output": { "type": "string" },
                "options": { "type": "array", "item": { "$ref": "#/$defs/command_option" } },
                "notes": { "type": "string" }
              },
              "required": ["name"],
              "additionalProperties": false
            }
          },
          "unimplemented": { "type": "array", "items": { "$ref": "#/$defs/instruction" } },
          "notes": { "type": "string" }
        },
        "additionalProperties": false
      }
    },
    "notes": { "type": "string" },
    "todo": { "type": "string" }
  },
  "required": ["id", "name", "authors", "license", "languages", "tags", "date", "spec_version", "source"],
  "additionalProperties": false
}
