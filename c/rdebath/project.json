{
  "id": "c/rdebath",
  "name": "Whitespace",
  "authors": ["Robert de Bath"],
  "license": "none",
  "languages": ["C", "Lex"],
  "tags": ["transpiler", "interpreter", "assembler", "program builder", "programs"],
  "date": "2015-08-18 14:25:03 +0100",
  "spec_version": "0.3",
  "source": ["https://github.com/rdebath/whitespace", "https://github.com/wspace/rdebath-c"],
  "submodules": [{ "path": "whitespace", "url": "https://github.com/wspace/rdebath-c" }],
  "whitespace": {
    "nonstandard": [
      { "name": "jzp", "aliases": ["jumppz"], "args": ["label"] },
      { "name": "jzn", "aliases": ["jumpnz"], "args": ["label"] },
      { "name": "jp", "aliases": ["jumpp"], "args": ["label"] },
      { "name": "jnz", "aliases": ["jumppn", "jumpnp"], "args": ["label"] },
      { "name": "trace", "args": ["number"] }
    ],
    "extension": "ws"
  },
  "assembly": [
    {
      "source": "ws_engine.h, ws_gencode.h, and ws2c.c",
      "mnemonics": {
        "push": "push",
        "dup": "dup",
        "copy": "pick",
        "swap": "swap",
        "drop": "drop",
        "slide": "slide",
        "add": "add",
        "sub": "sub",
        "mul": "mul",
        "div": "div",
        "mod": "mod",
        "store": "store",
        "retrieve": "fetch",
        "label": "label",
        "call": "call",
        "jmp": "jump",
        "jz": "jz",
        "jn": "jn",
        "ret": "return",
        "end": "exit",
        "printc": "outc",
        "printi": "outn",
        "readc": "readc",
        "readi": "readn"
      },
      "macros": [{ "name": "pushs" }, { "name": "jp" }, { "name": "jzp" }, { "name": "jzn" }, { "name": "jnz" }],
      "usage": ["interpreter", "program builder"],
      "notes": "Has `trace` extension instruction"
    },
    {
      "source": "wsa.l",
      "mnemonics": {
        "push": "push <number>",
        "dup": "dup",
        "copy": ["copy <number>", "pick <number>"],
        "swap": "swap",
        "drop": ["drop", "discard"],
        "slide": "slide <number>",
        "add": "add",
        "sub": "sub",
        "mul": "mul",
        "div": "div",
        "mod": "mod",
        "store": "store",
        "retrieve": ["fetch", "retrieve", "retrive", "retreive"],
        "label": ["<label_number>:", "<label_name><optional_space>:", "label <label>"],
        "call": "call <label>",
        "jmp": ["jmp <label>", "jump <label>"],
        "jz": "jz <label>",
        "jn": "jn <label>",
        "ret": ["ret", "return"],
        "end": ["quit", "exit", "end"],
        "printc": ["outc", "outchar", "printc"],
        "printi": ["outn", "outnum", "printi"],
        "readc": ["readc", "readchar"],
        "readi": ["readn", "readnum", "readi"]
      },
      "patterns": {
        "label": "<label_number>|<label_name>",
        "label_name": "\\.?[A-Za-z_$][A-Za-z0-9_$]*",
        "label_number": "[0-9]+",
        "number": "-?[0-9]+|'[^\\\n']'|'\\[ntab']'",
        "optional_space": "[ \t]*",
        "space": "[ \t]+"
      },
      "line_comments": [";", "#"],
      "indentation": "",
      "usage": ["assembler"]
    },
    {
      "source": "wsa.sed",
      "mnemonics": {
        "push": "push <signed_number>",
        "dup": "doub",
        "swap": "swap",
        "drop": "pop",
        "add": ["add", "add <unsigned_number>"],
        "sub": ["sub", "sub <unsigned_number>"],
        "mul": "mul",
        "div": "div",
        "mod": "mod",
        "store": ["store", "store <unsigned_number>"],
        "retrieve": ["retrive", "retrive <unsigned_number>"],
        "label": "label <label>",
        "call": "call <label>",
        "jmp": "jump <label>",
        "jz": "jumpz <label>",
        "jn": "jumpn <label>",
        "ret": "ret",
        "end": "exit",
        "printc": "outC",
        "printi": "outN",
        "readc": "InC",
        "readi": "InN",
        "dumpstack": "debug_printstack",
        "dumpheap": "debug_printheap"
      },
      "macros": [
        { "name": "jumppz <label>" },
        { "name": "jumpnz <label>" },
        { "name": "jumpp <label>" },
        { "name": "jumppn <label>" },
        { "name": "jumpnp <label>" },
        {
          "name": "pushs <string>",
          "replace": ["push 0", "push <sn>", "â€¦", "push <s1>", "push <s0>"],
          "notes": "Uses dup for matching consecutive characters"
        },
        { "name": "test <unsigned_number>", "replace": ["dup", "push <unsigned_number>", "sub"] },
        { "name": "ifoption <label>", "replace": ["#ifdef <label>"] },
        { "name": "endoption", "replace": ["#endif"] },
        { "name": "include <label>", "replace": ["#include \"<label>.h\""] }
      ],
      "patterns": {
        "label": "[A-Za-z][A-Za-z0-9_]*",
        "signed_number": "-?[0-9]+",
        "string": "\"[^\"]*\"",
        "unsigned_number": "[0-9]+"
      },
      "line_comments": ["--", ";"],
      "block_comments": [{ "start": "{-", "end": "-}", "nestable": false }],
      "usage": ["assembler"],
      "notes": "outN, outC, InC, and InN are case-insensitive; the reset are case-sensitive."
    }
  ],
  "programs": [
    {
      "path": "gencode-deadfish-in-ws.c",
      "generated": "deadfish.ws",
      "spec_version": "0.2",
      "generate": "gcc -o gencode-deadfish-in-ws gencode-deadfish-in-ws.c && ./gencode-deadfish-in-ws > deadfish.ws"
    },
    {
      "path": "gen-99bottles.c",
      "generated": "99bottles.ws",
      "spec_version": "0.2",
      "generate": "gcc -o gen-99bottles gen-99bottles.c && ./gen-99bottles > 99bottles.ws"
    },
    {
      "path": "gen-prime.c",
      "generated": "prime.ws",
      "spec_version": "0.2",
      "generate": "gcc -o gen-prime gen-prime.c && ./gen-prime > prime.ws"
    },
    {
      "path": "gen-wsinterws.c",
      "generated": "wsinterws.ws",
      "spec_version": "0.2",
      "generate": "gcc -o gen-wsinterws gen-wsinterws.c && ./gen-wsinterws > wsinterws.ws"
    },
    { "path": "io.h", "spec_version": "0.2" },
    { "path": "memory.h", "spec_version": "0.2" },
    { "path": "tests/AndrewKemp/99bottles.ws" },
    { "path": "tests/Burghard/endquitend.ws" },
    { "path": "tests/Burghard/prime.ws" },
    { "path": "tests/Burghard/wsinterws-orig.ws" },
    { "path": "tests/Burghard/wsinterws.ws" },
    { "path": "tests/Tetris/tetris.ws" },
    { "path": "tests/Vii5ard/bf.ws" },
    { "path": "tests/Vii5ard/c.ws" },
    { "path": "tests/Vii5ard/fibonacci.ws" },
    { "path": "tests/Vii5ard/hanoi.ws" },
    { "path": "tests/Vii5ard/nerd.ws" },
    { "path": "tests/Vii5ard/quine-2.ws" },
    { "path": "tests/Vii5ard/quine.ws" },
    { "path": "tests/WSpace-0.3/calc.ws" },
    { "path": "tests/WSpace-0.3/count.ws" },
    { "path": "tests/WSpace-0.3/fact.ws" },
    { "path": "tests/WSpace-0.3/hanoi.ws" },
    { "path": "tests/WSpace-0.3/hworld.ws" },
    { "path": "tests/WSpace-0.3/loctest.ws" },
    { "path": "tests/WSpace-0.3/name.ws" },
    { "path": "tests/rdebath/cellsize.ws" },
    { "path": "tests/rdebath/hello2.ws" },
    { "path": "tests/rdebath/helloworld.ws" },
    {
      "path": "tests/whitespacers/sudoku.ws",
      "inputs": ["tests/whitespacers/sudoku.in"],
      "outputs": ["tests/whitespacers/sudoku.txt"]
    }
  ],
  "commands": [
    {
      "type": "transpiler",
      "bin": "ws2c",
      "usage": "$0 [-r | -c] [-v...] [-q] [-e | -z | -n] [-d] [-old] [--] [<file>]",
      "options": [
        { "short": "r", "desc": "Interpret now" },
        { "short": "c", "desc": "Compile to C" },
        { "short": "v", "desc": "Print a single comment line; repeat to print more lines" },
        { "short": "q", "desc": "Disable warnings" },
        { "short": "e", "desc": "-1 on EOF (not implemented)" },
        { "short": "z", "desc": "0 on EOF (not implemented)" },
        { "short": "n", "desc": "1 on EOF (not implemented)" },
        { "short": "d", "desc": "Debug mode" },
        { "short": "old", "desc": "Disable Whitespace 0.3 features" }
      ],
      "option_parse": "manual",
      "notes": "Interprets program when no flags given. Reconstructs ASCII label strings of the form that were of the form [A-Za-z_][A-Za-z0-9_]* from numbers."
    },
    {
      "type": "interpreter",
      "bin": "wsc.sh",
      "usage": "$0 <file> [<CFLAGS> [<LDFLAGS>]]",
      "output": "stdout",
      "notes": "Compiles and runs program"
    },
    {
      "type": "assembler",
      "bin": "wsa",
      "usage": "$0 [<file>...]",
      "output": "stdout",
      "notes": "Assembles other Whitespace assembly dialects"
    },
    {
      "type": "assembler",
      "bin": "wsa.sed",
      "usage": "sed -f $0 <file>",
      "output": "stdout",
      "notes": "Assembles Oliver Burghard's Whitespace assembly dialect, including shorthand instructions"
    }
  ],
  "notes": "Transpiles to C. Has tests directory that contains Whitespace programs from many authors."
}
